Grading at Tue Aug 14 10:49:25 UTC 2018
Compiling your code
rm test poker cards.o my-test-main.o *~
Makefile:10: recipe for target 'clean' failed
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==401== Memcheck, a memory error detector
==401== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==401== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==401== Command: ./test-eval inp.1.txt
==401== Parent PID: 400
==401== 
==401== Invalid read of size 8
==401==    at 0x401AEF: build_hand_from_match (eval.c:237)
==401==    by 0x40254A: evaluate_hand (eval.c:438)
==401==    by 0x402932: describe_hand (test-eval.c:68)
==401==    by 0x402B5D: main (test-eval.c:116)
==401==  Address 0x520a308 is 0 bytes after a block of size 40 alloc'd
==401==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==401==    by 0x40103A: add_card_to (deck-c4.c:29)
==401==    by 0x4032F7: hand_from_string (input.c:49)
==401==    by 0x402AE2: main (test-eval.c:110)
==401== 
==401== Invalid read of size 8
==401==    at 0x401AF2: build_hand_from_match (eval.c:237)
==401==    by 0x40254A: evaluate_hand (eval.c:438)
==401==    by 0x402932: describe_hand (test-eval.c:68)
==401==    by 0x402B5D: main (test-eval.c:116)
==401==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==401== 
==401== 
==401== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==401==  Access not within mapped region at address 0x0
==401==    at 0x401AF2: build_hand_from_match (eval.c:237)
==401==    by 0x40254A: evaluate_hand (eval.c:438)
==401==    by 0x402932: describe_hand (test-eval.c:68)
==401==    by 0x402B5D: main (test-eval.c:116)
==401==  If you believe this happened as a result of a stack
==401==  overflow in your program's main thread (unlikely but
==401==  possible), you can try to increase the size of the
==401==  main thread stack using the --main-stacksize= flag.
==401==  The main thread stack size used in this run was 8388608.
==401== 
==401== HEAP SUMMARY:
==401==     in use at exit: 864 bytes in 16 blocks
==401==   total heap usage: 202 allocs, 186 frees, 12,472 bytes allocated
==401== 
==401== LEAK SUMMARY:
==401==    definitely lost: 0 bytes in 0 blocks
==401==    indirectly lost: 0 bytes in 0 blocks
==401==      possibly lost: 0 bytes in 0 blocks
==401==    still reachable: 864 bytes in 16 blocks
==401==         suppressed: 0 bytes in 0 blocks
==401== Rerun with --leak-check=full to see details of leaked memory
==401== 
==401== For counts of detected and suppressed errors, rerun with: -v
==401== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==406== Memcheck, a memory error detector
==406== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==406== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==406== Command: ./test-eval inp.2.txt
==406== Parent PID: 405
==406== 
==406== Invalid read of size 8
==406==    at 0x40148B: card_ptr_comp (eval.c:9)
==406==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==406==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==406==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==406==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==406==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==406==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==406==    by 0x4E7369E: qsort_r (msort.c:297)
==406==    by 0x401BFC: compare_hands (eval.c:265)
==406==    by 0x402BD2: main (test-eval.c:124)
==406==  Address 0x5207518 is 0 bytes after a block of size 40 alloc'd
==406==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==406==    by 0x40103A: add_card_to (deck-c4.c:29)
==406==    by 0x4032F7: hand_from_string (input.c:49)
==406==    by 0x402BBB: main (test-eval.c:123)
==406== 
==406== Invalid read of size 4
==406==    at 0x40148E: card_ptr_comp (eval.c:9)
==406==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==406==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==406==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==406==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==406==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==406==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==406==    by 0x4E7369E: qsort_r (msort.c:297)
==406==    by 0x401BFC: compare_hands (eval.c:265)
==406==    by 0x402BD2: main (test-eval.c:124)
==406==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==406== 
==406== 
==406== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==406==  Access not within mapped region at address 0x0
==406==    at 0x40148E: card_ptr_comp (eval.c:9)
==406==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==406==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==406==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==406==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==406==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==406==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==406==    by 0x4E7369E: qsort_r (msort.c:297)
==406==    by 0x401BFC: compare_hands (eval.c:265)
==406==    by 0x402BD2: main (test-eval.c:124)
==406==  If you believe this happened as a result of a stack
==406==  overflow in your program's main thread (unlikely but
==406==  possible), you can try to increase the size of the
==406==  main thread stack using the --main-stacksize= flag.
==406==  The main thread stack size used in this run was 8388608.
==406== 
==406== HEAP SUMMARY:
==406==     in use at exit: 880 bytes in 17 blocks
==406==   total heap usage: 56 allocs, 39 frees, 9,768 bytes allocated
==406== 
==406== LEAK SUMMARY:
==406==    definitely lost: 0 bytes in 0 blocks
==406==    indirectly lost: 0 bytes in 0 blocks
==406==      possibly lost: 0 bytes in 0 blocks
==406==    still reachable: 880 bytes in 17 blocks
==406==         suppressed: 0 bytes in 0 blocks
==406== Rerun with --leak-check=full to see details of leaked memory
==406== 
==406== For counts of detected and suppressed errors, rerun with: -v
==406== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==459== Memcheck, a memory error detector
==459== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==459== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==459== Command: ./test-eval inp.7.txt
==459== Parent PID: 458
==459== 
==459== Invalid read of size 8
==459==    at 0x40148B: card_ptr_comp (eval.c:9)
==459==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==459==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==459==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==459==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==459==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==459==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==459==    by 0x4E7369E: qsort_r (msort.c:297)
==459==    by 0x401BFC: compare_hands (eval.c:265)
==459==    by 0x402BD2: main (test-eval.c:124)
==459==  Address 0x520e940 is 0 bytes after a block of size 48 alloc'd
==459==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==459==    by 0x40103A: add_card_to (deck-c4.c:29)
==459==    by 0x4032F7: hand_from_string (input.c:49)
==459==    by 0x402BBB: main (test-eval.c:123)
==459== 
==459== Invalid read of size 4
==459==    at 0x40148E: card_ptr_comp (eval.c:9)
==459==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==459==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==459==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==459==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==459==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==459==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==459==    by 0x4E7369E: qsort_r (msort.c:297)
==459==    by 0x401BFC: compare_hands (eval.c:265)
==459==    by 0x402BD2: main (test-eval.c:124)
==459==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==459== 
==459== 
==459== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==459==  Access not within mapped region at address 0x0
==459==    at 0x40148E: card_ptr_comp (eval.c:9)
==459==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==459==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==459==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==459==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==459==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==459==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==459==    by 0x4E7369E: qsort_r (msort.c:297)
==459==    by 0x401BFC: compare_hands (eval.c:265)
==459==    by 0x402BD2: main (test-eval.c:124)
==459==  If you believe this happened as a result of a stack
==459==  overflow in your program's main thread (unlikely but
==459==  possible), you can try to increase the size of the
==459==  main thread stack using the --main-stacksize= flag.
==459==  The main thread stack size used in this run was 8388608.
==459== 
==459== HEAP SUMMARY:
==459==     in use at exit: 912 bytes in 19 blocks
==459==   total heap usage: 386 allocs, 367 frees, 16,504 bytes allocated
==459== 
==459== LEAK SUMMARY:
==459==    definitely lost: 0 bytes in 0 blocks
==459==    indirectly lost: 0 bytes in 0 blocks
==459==      possibly lost: 0 bytes in 0 blocks
==459==    still reachable: 912 bytes in 19 blocks
==459==         suppressed: 0 bytes in 0 blocks
==459== Rerun with --leak-check=full to see details of leaked memory
==459== 
==459== For counts of detected and suppressed errors, rerun with: -v
==459== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==488== Memcheck, a memory error detector
==488== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==488== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==488== Command: ./test-eval inp.10.txt
==488== Parent PID: 487
==488== 
==488== Invalid read of size 8
==488==    at 0x40148B: card_ptr_comp (eval.c:9)
==488==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==488==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==488==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==488==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==488==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==488==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==488==    by 0x4E7369E: qsort_r (msort.c:297)
==488==    by 0x401BFC: compare_hands (eval.c:265)
==488==    by 0x402BD2: main (test-eval.c:124)
==488==  Address 0x520b2b8 is 0 bytes after a block of size 40 alloc'd
==488==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==488==    by 0x40103A: add_card_to (deck-c4.c:29)
==488==    by 0x4032F7: hand_from_string (input.c:49)
==488==    by 0x402BBB: main (test-eval.c:123)
==488== 
==488== Invalid read of size 4
==488==    at 0x40148E: card_ptr_comp (eval.c:9)
==488==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==488==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==488==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==488==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==488==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==488==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==488==    by 0x4E7369E: qsort_r (msort.c:297)
==488==    by 0x401BFC: compare_hands (eval.c:265)
==488==    by 0x402BD2: main (test-eval.c:124)
==488==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==488== 
==488== 
==488== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==488==  Access not within mapped region at address 0x0
==488==    at 0x40148E: card_ptr_comp (eval.c:9)
==488==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==488==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==488==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==488==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==488==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==488==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==488==    by 0x4E7369E: qsort_r (msort.c:297)
==488==    by 0x401BFC: compare_hands (eval.c:265)
==488==    by 0x402BD2: main (test-eval.c:124)
==488==  If you believe this happened as a result of a stack
==488==  overflow in your program's main thread (unlikely but
==488==  possible), you can try to increase the size of the
==488==  main thread stack using the --main-stacksize= flag.
==488==  The main thread stack size used in this run was 8388608.
==488== 
==488== HEAP SUMMARY:
==488==     in use at exit: 880 bytes in 17 blocks
==488==   total heap usage: 234 allocs, 217 frees, 13,124 bytes allocated
==488== 
==488== LEAK SUMMARY:
==488==    definitely lost: 0 bytes in 0 blocks
==488==    indirectly lost: 0 bytes in 0 blocks
==488==      possibly lost: 0 bytes in 0 blocks
==488==    still reachable: 880 bytes in 17 blocks
==488==         suppressed: 0 bytes in 0 blocks
==488== Rerun with --leak-check=full to see details of leaked memory
==488== 
==488== For counts of detected and suppressed errors, rerun with: -v
==488== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: D
